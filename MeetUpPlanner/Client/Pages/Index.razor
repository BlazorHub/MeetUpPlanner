@page "/"
@inject HttpClient Http
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@using MeetUpPlanner.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager


<h2>Zugangsdaten</h2>

<EditForm OnValidSubmit="CheckKeyword" Model="@AppStateStore">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="keyword">Schlüsselwort für die öffentlichen Ausfahrten</label>
        <InputText id="keyword" aria-describedby="keywordHelp" class="form-control" @bind-Value="AppStateStore.KeyWord" autocomplete="on" placeholder="Schlüsselwort für den Zugriff" title="Schlüsselwort zum allgemeinen Zugriff auf die Ausfahrten." />
        <small id="keywordHelp" class="form-text text-muted">
            Für den Zugriff auf die Termine ist ein "Schlüsselwort" notwendig, das separat kommuniziert wurde.
        </small>
    </div>
    <div class="form-row">
        <label for="optkeyword1">Optionale Schlüsselwörter für private Ausfahrten</label>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <InputText id="optkeyword1" aria-describedby="optkeywordHelp" class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord1" title="Optionales Schlüsselwort 1" />
            <small id="optkeywordHelp" class="form-text text-muted">
                Ausfahrten können über separate Schlüsselwörter quasi "privatisiert" werden. Hier kannst du die zusätzlichen Schlüsselwörter eintragen.
            </small>
        </div>
        <div class="form-group col-md-4">
            <InputText class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord2" title="Optionales Schlüsselwort 2" />
        </div>
        <div class="form-group col-md-4">
            <InputText class="form-control form-control-sm" @bind-Value="AppStateStore.PrivateKeyWord3" title="Optionales Schlüsselwort 3" />
        </div>
    </div>
    <hr />
    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" aria-describedby="nameHelp" class="form-control" @bind-Value="AppStateStore.Name" autocomplete="on" placeholder="Vor- und Nachname" title="Vollständiger Name für die Nachvollziehbarkeit." />
        <small id="nameHelp" class="form-text text-muted">
            Zur eindeutigen Nachverfolgbarkeit bitte den Namen mit Vor- und Nachnamen eingeben.
        </small>
    </div>
    <div class="form-group">
        <label for="Phone">Telefon/Mail</label>
        <InputText id="Phone" aria-describedby="phoneHelp" class="form-control" @bind-Value="AppStateStore.PhoneMail" autocomplete="on" placeholder="Telefon-Nr. oder Mail-Adresse" title="Bitte Telefonnummer oder Mailadresse angeben." />
        <small id="phoneHelp" class="form-text text-muted">
            Für die einfache Erreichbarkeit hier bitte eure Mail-Adresse oder Telefonnummer eingeben.
        </small>
    </div>
    <div class="form-group">
        <div class="form-check">
            <InputCheckbox id="SaveSettings" class="form-check-input" @bind-Value="AppStateStore.SaveSettings"></InputCheckbox>
            <label for="SaveSettings" class="form-check-label">Einstellungen im Browser merken?</label>
        </div>
    </div>
    <button type="submit" id="BtnSaveKeyword" class="btn btn-primary">Zu den Terminen ...</button>
</EditForm>
<br />
<div class="alert-info">
    <p>
        @logMessage
    </p>
</div>
<hr />
<p>
    Um Termine für Ausfahrten zu sehen und zu erstellen, muss das "Schlüsselwort" angegeben werden. Nur wenn dieses richtig ist, werden die öffentliche Termine
    frei geschaltet.
</p>
<p>
    Termine können auch mit einem privaten Schlüsselwort geschützt werden. Bei Eingabe von optionalen Schlüsselwörtern (bis zu drei) werden die entsprechend
    "versteckten" Termine neben den öffentlichen angezeigt.
</p>

@code {
    string logMessage = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        AppStateStore.ClientSettings = new ClientSettings();

        if (await localStorage.ContainKeyAsync("permAppState"))
        {
            // Read the user data if available from browser storage
            PermAppState permAppState = await localStorage.GetItemAsync<PermAppState>("permAppState");
            // Copy the settings needed to application state
            AppStateStore.KeyWord = permAppState.KeyWord;
            AppStateStore.Name = permAppState.Name;
            AppStateStore.PhoneMail = permAppState.PhoneMail;
            AppStateStore.PrivateKeyWord1 = permAppState.PrivateKeyWord1;
            AppStateStore.PrivateKeyWord2 = permAppState.PrivateKeyWord2;
            AppStateStore.PrivateKeyWord2 = permAppState.PrivateKeyWord2;
        }

        // Get client settings from server
        AppStateStore.ClientSettings = await Http.GetFromJsonAsync<ClientSettings>("Util/clientsettings");
    }

    private async Task CheckKeyword()
    {
        string keyword = AppStateStore.KeyWord;
        // Keyword check at server side
        KeywordCheck keywordCheck = await Http.GetFromJsonAsync<KeywordCheck>($"Util/checkkeyword?keyword={keyword}");
        KeywordCheck.IsAdmin = keywordCheck.IsAdmin;
        KeywordCheck.IsUser = keywordCheck.IsUser;
        AppStateStore.NotifyStateChanged();
        if (!KeywordCheck.IsUser && !KeywordCheck.IsAdmin)
        {
            logMessage = "Das eingegebene Schlüsselwort ist leider falsch...";
        }
        if (AppStateStore.SaveSettings)
        {
            // Copy from app state to permanent storage
            PermAppState permAppState = new PermAppState();
            permAppState.KeyWord = AppStateStore.KeyWord;
            permAppState.Name = AppStateStore.Name;
            permAppState.PhoneMail = AppStateStore.PhoneMail;
            permAppState.PrivateKeyWord1 = AppStateStore.PrivateKeyWord1;
            permAppState.PrivateKeyWord2 = AppStateStore.PrivateKeyWord2;
            permAppState.PrivateKeyWord2 = AppStateStore.PrivateKeyWord2;
            await localStorage.SetItemAsync<PermAppState>("permAppState", permAppState);
        }
        else
        {
            await localStorage.RemoveItemAsync("permAppState");
        }
        if (KeywordCheck.IsAdmin)
        {
            NavigationManager.NavigateTo("admin");
        }
        else if (KeywordCheck.IsUser)
        {
            NavigationManager.NavigateTo("calendar");
        }
    }


}


