@page "/newmeetup"
@page "/newmeetup/{ItemId}"
@inject HttpClient Http
@inject AppState AppStateStore
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@using MeetUpPlanner.Shared
@using Blazored.TextEditor

@if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.NewMeetupMessage))
{
    <div class="row jumbotron">
        @if (!String.IsNullOrEmpty(AppStateStore.ClientSettings?.LogoLink))
        {
            <div class="col-3">
                <img src="@AppStateStore.ClientSettings?.LogoLink" class="img-fluid" />
            </div>
        }
        <div class="col">
            @((MarkupString)AppStateStore.ClientSettings?.NewMeetupMessage)
        </div>
    </div>
}
<h1>Ausfahrt</h1>
<EditForm Model="@meetup" OnValidSubmit="OnSave">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="title">Titel</label>
        <InputText id="title" aria-describedby="titleHelp" class="form-control" @bind-Value="meetup.Title" autocomplete="on" placeholder="Kurzer Titel der Ausfahrt" title="Titel" />
        <small id="titleHelp" class="form-text text-muted">
            Kurzer Titel zur Ausfahrt als Überschrift.
        </small>
    </div>
    <div class="form-group">
        <label>Beschreibung zur Tour</label>
        <BlazoredTextEditor @ref="@htmlDescription" Placeholder="Mehr oder weniger ausführliche Beschreibung der Tour">
            <ToolbarContent>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>@if (null != meetup.Summary)
            {@((MarkupString)meetup.Summary)}</EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="form-group">
        <label for="link">Link</label>
        <InputText id="link" aria-describedby="linkHelp" class="form-control" @bind-Value="meetup.Link" placeholder="URL" title="Link zu weiterer Streckeninfo" />
        <small id="linkHelp" class="form-text text-muted">
            Optional: Link zu weiteren Strecken-Infos, z.B. Komoot, Strava usw.
        </small>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="whenDate">Datum</label>
            @if (onlyScopedMeetUps)
            {
                <InputSelect @bind-Value="whenDateString" class="form-control">
                    @foreach (KeyValuePair<string, string> c in GetScopedDays())
                        {
                        <option value="@c.Key">@c.Value</option>
                        }
                </InputSelect>
            }
            else
            {
                <InputDate id="whenDate" aria-describedby="whenDateHelp" class="form-control" @bind-Value="whenDate" title="Startdatum" />
            }
            <small id="whenDateHelp" class="form-text text-muted">
                Wann geht's los?
            </small>
        </div>
        <div class="form-group col-md-3">
            <label for="whenTime">Uhrzeit</label>
            <input type="time" class="form-control" @bind="@whenTime" title="Startzeit" />
        </div>
    </div>
    <div class="form-group">
        <label for="place">Startort</label>
        <InputText id="place" aria-describedby="placeHelp" class="form-control" @bind-Value="meetup.Place" autocomplete="on" placeholder="Startpunkt der Ausfahrt" />
        <small id="placeHelp" class="form-text text-muted">
            Treffpunkt der Gruppe für die Ausfahrt, z.B. "Torburg", "Therme", "Unibib", "Mexikaner Merowinger"
        </small>
    </div>
    <div class="form-group">
        <label for="level">Länge</label>
        <InputText id="level" aria-describedby="levelHelp" class="form-control" @bind-Value="meetup.LevelDescription" autocomplete="on" placeholder="km / Hm" />
        <small id="levelHelp" class="form-text text-muted">
            Länge der Tour (zumindest ungefähr) und möglichst Höhenmeter oder auch ungefähre Fahrtzeit.
        </small>
    </div>
    <div class="form-group">
        <label for="tempo">Tempo</label>
        <InputText id="tempo" aria-describedby="tempoHelp" class="form-control" @bind-Value="meetup.Tempo" autocomplete="on" placeholder="Geplante Geschwindigkeit" />
        <small id="tempoHelp" class="form-text text-muted">
            Geschwindigkeit als "Latte", "Cappuccino", "Espresso" oder auch km/h Angabe
        </small>
    </div>
    <div class="form-group">
        <label for="size">Max. Gruppengröße</label>
        <RadzenNumeric id="size" aria-describedby="sizeHelp" class="form-control" TValue="int" Min="2" Max="@AppStateStore.ClientSettings.MaxGroupSize" @bind-Value="meetup.MaxRegistrationsCount" />
        <small id="sizeHelp" class="form-text text-muted">
            Hier kann die Größe der Gruppe entsprechend beschränkt werden. Maximale Gruppengröße ist momentan @(AppStateStore.ClientSettings?.MaxGroupSize).
        </small>
    </div>
    <div class="form-group">
        <label for="privateKeyword">Private Ausfahrt?</label>
        <InputText id="privateKeyword" aria-describedby="privateKeywordHelp" class="form-control" @bind-Value="meetup.PrivateKeyword" autocomplete="on" placeholder="Schlüsselwort für private Ausfahrt" />
        <small id="privateKeywordHelp" class="form-text text-muted">
            Falls die Ausfahrt "privat" sein soll, hier ein Schlüsselwort festlegen und den potentiellen Mitfahrern separat mitteilen.
        </small>
    </div>
    <ValidationSummary />
    <button type="submit" id="BtnSave" class="btn btn-primary">Termin speichern ...</button>
    <button type="reset" id="BtnCancel" class="btn btn-secondary" @onclick="@(() => OnCancel())">Zurück ohne Speichern</button>
</EditForm>

@code {
    [Parameter]
    public string ItemId { get; set; }


    CalendarItem meetup = new CalendarItem();
    string whenDateString;
    DateTime whenTime = DateTime.Now;
    DateTime whenDate = DateTime.Now;
    BlazoredTextEditor htmlDescription;
    bool onlyScopedMeetUps = false;
    private List<KeyValuePair<string, string>> scopedDates = new List<KeyValuePair<string, string>>();

    protected override async Task OnInitializedAsync()
    {
        if (null != AppStateStore && !String.IsNullOrEmpty(AppStateStore.KeyWord))
        {
            onlyScopedMeetUps = AppStateStore.ClientSettings.OnlyScopedMeetUpsAllowed;
            scopedDates = GetScopedDays();
            if (!String.IsNullOrEmpty(ItemId))
            {
                string keyword = AppStateStore.KeyWord;
                // Get referenced calendar item
                meetup = await Http.GetFromJsonAsync<CalendarItem>($"Calendar/calendaritem?keyword={keyword}&itemId={ItemId}");
            }
            else
            {
                meetup.HostFirstName = AppStateStore.FirstName;
                meetup.HostLastName = AppStateStore.LastName;
                meetup.HostAdressInfo = AppStateStore.PhoneMail;
                meetup.MaxRegistrationsCount = AppStateStore.ClientSettings.MaxGroupSize;
                if (onlyScopedMeetUps && scopedDates.Count > 0)
                {
                    whenDateString = scopedDates[0].Key;
                    DateTime dateToSetStartTime = DateTime.Parse(whenDateString);
                    if (dateToSetStartTime.DayOfWeek == DayOfWeek.Saturday || dateToSetStartTime.DayOfWeek == DayOfWeek.Sunday)
                    {
                        meetup.StartDate = dateToSetStartTime.AddHours(10.0);
                    }
                    else
                    {
                        meetup.StartDate = dateToSetStartTime.AddHours(18.0);
                    }
                }
            }
            whenDate = meetup.StartDate;
            whenTime = meetup.StartDate;
            whenDateString = meetup.StartDate.ToString("yyyy-MM-dd");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task OnSave()
    {
        if (meetup.MaxRegistrationsCount > AppStateStore.ClientSettings.MaxGroupSize)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Gruppengröße", Detail = "Max. Gruppengröße überschritten.", Duration = 4000 });
            return;
        }
        if (onlyScopedMeetUps)
        {
            whenDate = DateTime.Parse(whenDateString);
        }
        meetup.StartDate = new DateTime(whenDate.Year, whenDate.Month, whenDate.Day, whenTime.Hour, whenTime.Minute, whenTime.Second);
        if (meetup.StartDate.CompareTo(DateTime.Now) < 0)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Startdatum",  Detail = "Bitte Startdatum korrigieren.", Duration = 4000 });
            return;
        }
        meetup.Summary = await htmlDescription.GetHTML();
        string keyword = AppStateStore.KeyWord;
        // Save calendarItem server
        await Http.PostAsJsonAsync<CalendarItem>($"Calendar/writecalendaritem?keyword={keyword}", meetup);

        NavigationManager.NavigateTo("/calendar");
    }
    protected void OnCancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }

    private List<KeyValuePair<string, string>> GetScopedDays()
    {
        List<KeyValuePair<string, string>> scopedDays = new List<KeyValuePair<string, string>>();

        DateTime currentDate = DateTime.Now;
        for (int i = 0; i < 7; ++i, currentDate = currentDate.AddDays(1))
        {
            switch (currentDate.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.MondayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.MondayBadge));
                    }
                    break;
                case DayOfWeek.Tuesday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.TuesdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.TuesdayBadge));
                    }
                    break;
                case DayOfWeek.Wednesday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.WednesdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.WednesdayBadge));
                    }
                    break;
                case DayOfWeek.Thursday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.ThursdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.ThursdayBadge));
                    }
                    break;
                case DayOfWeek.Friday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.FridayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.FridayBadge));
                    }
                    break;
                case DayOfWeek.Saturday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.SaturdayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.SaturdayBadge));
                    }
                    break;
                case DayOfWeek.Sunday:
                    if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.SundayBadge))
                    {
                        scopedDays.Add(new KeyValuePair<string, string>(currentDate.ToString("yyyy-MM-dd"), currentDate.ToString("dd.MM") + " - " + AppStateStore.ClientSettings.SundayBadge));
                    }
                    break;
            }
        }

        return scopedDays;
    }
}
