@page "/calendar"
@using MeetUpPlanner.Shared
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject BlazorTimer Timer
@inject BlazorTimer Timer2
@implements IDisposable
@using Newtonsoft.Json
@using System.IO

@if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.WhiteboardMessage))
{
    <div class="row jumbotron">
        @if (!String.IsNullOrEmpty(AppStateStore.ClientSettings.LogoLink))
        {
            <div class="col-md-1">
                <img src="@AppStateStore.ClientSettings.LogoLink" class="img-fluid" />
            </div>
        }
        <div class="col-md-11">
            @((MarkupString)AppStateStore.ClientSettings.WhiteboardMessage)
        </div>
    </div>
}

<h2>Ausfahrten</h2>
<a href="/newmeetup">Neue Ausfahrt erstellen</a>
<div class="row">
    @foreach (ExtendedCalendarItem item in calendarItems)
    {
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <strong>@item.GetStartDateAsString() - @item.Place</strong>
                    @if (!String.IsNullOrEmpty(item.PrivateKeyword))
                    {
                        <div class="text-right"><small class="text-muted"><span class="oi oi-key" title="Private Ausfahrt"></span> @item.PrivateKeyword</small></div>
                    }
                </div>
                <div class="card-body">
                    <div class="card-text">
                        <h6 class="text-muted">@item.LevelDescription - @item.Tempo</h6>
                        <h5 class="card-title">@item.Title</h5>
                        @if (!String.IsNullOrEmpty(item.Link))
                        {
                            <h6><small><a href="@item.Link" target="_blank">@item.Link</a></small></h6>
                        }
                        @((MarkupString)item.Summary)
                        <hr />
                        <small>Dabei (@item.ParticipantCounter von @item.MaxRegistrationsCount): <b>@item.HostDisplayName</b>@item.ParticipantsDisplay</small>
                        <hr />
                        <ul class="list-unstyled">
                            @foreach (CalendarComment c in item.CommentsList)
                            {
                                <li><small><em>@c.AuthorDisplayName (@c.DisplayDate): </em>@c.Comment</small></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="btn-group">
                        @if (AppStateStore.FirstName.Equals(item.HostFirstName) && AppStateStore.LastName.Equals(item.HostLastName) || KeywordCheck.IsAdmin)
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditCalendarItem(item.Id))">Ändern</button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Anmelden" hidden="@CheckIfUserIsAlreadyRegistered(item)" @onclick="@(() => Checkin(item.Id))">Anmelden</button>
                            <button class="btn btn-sm btn-outline-secondary" title="Abmelden" hidden="@(!CheckIfUserIsAlreadyRegistered(item))" @onclick="@(() => Checkout(item))">Abmelden</button>
                        }
                        <button class="btn btn-sm btn-outline-secondary" title="Kommentieren" @onclick="@(() => ShowComment(item))">Kommentieren</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<p class="alert-info">
    @logMessage
</p>

@code {
    private string logMessage = "";
    private IList<ExtendedCalendarItem> calendarItems = new List<ExtendedCalendarItem>();
    const double refreshInterval = 30000;
    const double navigateAwayInterval = 10 * 60 * 1000;

    protected override async Task OnInitializedAsync()
    {
        // Get list of calendar items
        await ReadData();
        Timer.SetTimer(refreshInterval);
        Timer.OnElapsed += TimerElapsedHandler;
        Timer2.SetTimer(navigateAwayInterval);
        Timer2.OnElapsed += NavigateAwayHandler;
    }
    protected async Task ReadData()
    {
        string keyword = AppStateStore.KeyWord;
        string privateKeywords = AppStateStore.PrivateKeyWord1 + ";" + AppStateStore.PrivateKeyWord2 + ";" + AppStateStore.PrivateKeyWord3; ;
        // Get list of calendar items
        calendarItems = await Http.GetFromJsonAsync<IList<ExtendedCalendarItem>>($"Calendar/extendedcalendaritems?keyword={keyword}&privatekeywords={privateKeywords}");
    }

    protected void EditCalendarItem(string itemId)
    {
        NavigationManager.NavigateTo($"/NewMeetUp/{itemId}");
    }

    protected async Task Checkin(string itemId)
    {
        Participant participant = new Participant();
        participant.ParticipantFirstName = AppStateStore.FirstName;
        participant.ParticipantLastName = AppStateStore.LastName;
        participant.CalendarItemId = itemId;
        string keyword = AppStateStore.KeyWord;
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/addparticipant?keyword={keyword}", participant);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            await ReadData();
            StateHasChanged();
        }
        else
        {
            logMessage = result.Message;
        }
    }
    protected async Task Checkout(ExtendedCalendarItem calendarItem)
    {
        // Find corresponding participant item
        Participant participant = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName);

        string keyword = AppStateStore.KeyWord;
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/removeparticipant?keyword={keyword}", participant);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            await ReadData();
            StateHasChanged();
        }
        else
        {
            logMessage = result.Message;
        }
    }
    protected bool CheckIfUserIsAlreadyRegistered(ExtendedCalendarItem calendarItem)
    {
        bool alreadyRegistered = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName) != null;
        return alreadyRegistered;
    }
    private async void TimerElapsedHandler()
    {
        await ReadData();
        Timer.SetTimer(refreshInterval);
        StateHasChanged();
    }
    private void NavigateAwayHandler()
    {
        NavigationManager.NavigateTo("/");
    }
    protected void ShowComment(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Comment/{calendarItem.Id}");
    }
    public void Dispose()
    {
        Timer.DisableTimer();
        Timer2.DisableTimer();
    }

}
