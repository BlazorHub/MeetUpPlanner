@page "/calendar"
@using MeetUpPlanner.Shared
@inject AppState AppStateStore
@inject KeywordCheck KeywordCheck
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@inject BlazorTimer Timer
@inject BlazorTimer Timer2
@implements IDisposable
@using Newtonsoft.Json
@using System.IO
@using Microsoft.AspNetCore.SignalR.Client

<MessageBoard Message="@AppStateStore.ClientSettings?.WhiteboardMessage" ShowLogo="false" />
<h1>Ausfahrten</h1>
<p>
    <a class="btn btn-primary" href="/newmeetup">Neue Ausfahrt erstellen</a>
</p>
<div class="row">
    <div class="col">
        <div class="form-group">
            <input type="text" class="form-control" aria-describedby="checkinCommentHelp" id="checkinComment" @bind="checkinComment.Comment" title="Kommentar zur Anmeldung" placeholder="Kommentar zur Anmeldung z.B. 'Ab Therme'" />
            <small id="checkinCommentHelp" class="form-text text-muted">
                Optional: Bei der Anmeldung zu einer Ausfahrt direkt einen Kommentar eingeben.
            </small>
        </div>
    </div>
</div>

<div class="row">
    @foreach (ExtendedCalendarItem item in calendarItems)
    {
        <div class="col mt-2">
            <div class="card">
                <div class="card-header">
                    <em>@item.GetStartDateAsString() - @item.Place</em>
                    @if (!String.IsNullOrEmpty(item.PrivateKeyword))
                    {
                        <span class="badge badge-danger"><span class="oi oi-key" title="Private Ausfahrt"></span> @item.PrivateKeyword</span>
                    }
                    <span class="badge badge-warning" hidden="@(!item.IsCross)">Cross</span>
                    @{
                        string badge = GetCalendarBadge(item);
                        if (!String.IsNullOrEmpty(badge))
                        {
                            <span class="badge badge-info">@badge</span>
                        }
                    }
                </div>
                <div class="card-body">
                    <div class="card-text">
                        <h6 class="text-muted">@item.LevelDescription - @item.Tempo</h6>
                        <h4 class="card-title">@item.Title</h4>
                        @if (!String.IsNullOrEmpty(item.Link))
                        {
                            <div><small><a href="@item.Link" target="_blank">@item.Link</a></small></div>
                        }
                        @((MarkupString)item.Summary)
                        <hr />
                        <small>Dabei (@item.ParticipantCounter von @item.MaxRegistrationsCount): <b>@item.HostDisplayName</b>@item.ParticipantsDisplay</small>
                        <hr />
                        <ul class="list-unstyled">
                            @foreach (CalendarComment c in item.CommentsList)
                            {
                                <li><small><em>@c.AuthorDisplayName (@c.DisplayDate): </em>@c.Comment</small></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="btn-group">
                        @if (CheckIfUserIsHost(item) || KeywordCheck.IsAdmin)
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Ändern" @onclick="@(() => EditCalendarItem(item.Id))"><span class="oi oi-pencil"></span></button>
                            <button class="btn btn-sm btn-outline-secondary" title="Löschen" @onclick="@(() => DeleteCalendarItem(item))"><span class="oi oi-trash"></span></button>
                        }
                        <button class="btn btn-sm btn-outline-secondary" title="Kommentieren" @onclick="@(() => ShowComment(item))"><span class="oi oi-comment-square"></span></button>
                        @if ((CheckIfUserIsHost(item) || KeywordCheck.IsAdmin) && item.ParticipantCounter > 1)
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Neuer Guide" @onclick="@(() => AssignNewHost(item))"><span class="oi oi-share-boxed"></span></button>
                        }
                        @if (!CheckIfUserIsHost(item))
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Anmelden" hidden="@CheckIfUserIsAlreadyRegistered(item)" @onclick="@(() => Checkin(item.Id))">Anmelden</button>
                            <button class="btn btn-sm btn-outline-secondary" title="Abmelden" hidden="@(!CheckIfUserIsAlreadyRegistered(item))" @onclick="@(() => Checkout(item))">Abmelden</button>
                        }
                        @if (AppStateStore.ClientSettings.GuestsEnabled)
                        {
                            <button class="btn btn-sm btn-outline-secondary" title="Gast einladen" @onclick="@(() => Invite(item))">Gast einladen</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CalendarComment checkinComment = new CalendarComment();
    private IList<ExtendedCalendarItem> calendarItems = new List<ExtendedCalendarItem>();
    const double refreshInterval = 30000;
    const double navigateAwayInterval = 10 * 60 * 1000;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (null != AppStateStore && !String.IsNullOrEmpty(AppStateStore.KeyWord))
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On("ReceiveMessage", () =>
            {
                CallReadData();
                StateHasChanged();
            });

            await hubConnection.StartAsync();

            // Polling with timer only if SignalR has problems
            //Timer.SetTimer(refreshInterval);
            //Timer.OnElapsed += TimerElapsedHandler;
            //Timer2.SetTimer(navigateAwayInterval);
            //Timer2.OnElapsed += NavigateAwayHandler;

            await ReadData();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected async Task ReadData()
    {
        string keyword = AppStateStore.KeyWord;
        string privateKeywords = AppStateStore.PrivateKeyWord1 + ";" + AppStateStore.PrivateKeyWord2 + ";" + AppStateStore.PrivateKeyWord3; ;
        // Get list of calendar items
        if (null != AppStateStore.Tenant)
        {
            Http.DefaultRequestHeaders.Add("x-meetup-tenant", AppStateStore.Tenant);
        }
        calendarItems = await Http.GetFromJsonAsync<IList<ExtendedCalendarItem>>($"calendar/extendedcalendaritems?keyword={keyword}&privatekeywords={privateKeywords}");
        StateHasChanged();
    }
    private void CallReadData()
    {
        Task.Run(async () =>
        {
            await ReadData();
        });
    }

    protected void EditCalendarItem(string itemId)
    {
        NavigationManager.NavigateTo($"/NewMeetUp/{itemId}");
    }

    protected async Task Checkin(string itemId)
    {
        Participant participant = new Participant();
        participant.ParticipantFirstName = AppStateStore.FirstName;
        participant.ParticipantLastName = AppStateStore.LastName;
        participant.ParticipantAdressInfo = AppStateStore.PhoneMail;
        participant.CalendarItemId = itemId;
        string keyword = AppStateStore.KeyWord;
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/addparticipant?keyword={keyword}", participant);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            // Save Checkin-Comment to server
            checkinComment.CalendarItemId = itemId;
            checkinComment.AuthorFirstName = AppStateStore.FirstName;
            checkinComment.AuthorLastName = AppStateStore.LastName;
            if (!String.IsNullOrEmpty(checkinComment.Comment))
            {
                await Http.PostAsJsonAsync<CalendarComment>($"Calendar/addcomment?keyword={keyword}", checkinComment);
            }
            if (IsConnected) await SendMessage();
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Angemeldet", Detail = "Du bist jetzt angemeldet. Falls du doch nicht dabei sein kannst, melde dich bitte wieder ab.", Duration = 4000 });
            // Read data again
            await ReadData();
            StateHasChanged();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
    }
    protected async Task Checkout(ExtendedCalendarItem calendarItem)
    {
        // Find corresponding participant item
        Participant participant = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName);

        string keyword = AppStateStore.KeyWord;
        HttpResponseMessage response = await Http.PostAsJsonAsync<Participant>($"Calendar/removeparticipant?keyword={keyword}", participant);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            if (IsConnected) await SendMessage();
            await ReadData();
            StateHasChanged();
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Fehler", Detail = result.Message, Duration = 4000 });
        }
    }
    protected bool CheckIfUserIsAlreadyRegistered(ExtendedCalendarItem calendarItem)
    {
        bool alreadyRegistered = calendarItem.FindParticipant(AppStateStore.FirstName, AppStateStore.LastName) != null;
        return alreadyRegistered;
    }
    protected bool CheckIfUserIsHost(ExtendedCalendarItem calendarItem)
    {
        bool isHost = (calendarItem.HostFirstName.Equals(AppStateStore.FirstName) && calendarItem.HostLastName.Equals(AppStateStore.LastName));
        return isHost;
    }
    private async void TimerElapsedHandler()
    {
        await ReadData();
        Timer.SetTimer(refreshInterval);
        StateHasChanged();
    }
    private void NavigateAwayHandler()
    {
        NavigationManager.NavigateTo("/");
    }
    protected void ShowComment(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Comment/{calendarItem.Id}");
    }
    protected void Invite(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/Invite/{calendarItem.Id}");
    }
    protected void DeleteCalendarItem(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/ConfirmDelete/{calendarItem.Id}");
    }
    protected void AssignNewHost(ExtendedCalendarItem calendarItem)
    {
        NavigationManager.NavigateTo($"/AssignNewHost/{calendarItem.Id}");
    }
    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
        // only if Timer is used instead of SignalR
        // Timer.DisableTimer();
        // Timer2.DisableTimer();
    }
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    private string GetCalendarBadge(ExtendedCalendarItem calendarItem)
    {
        string badge = null;
        DayOfWeek weekday = calendarItem.StartDate.DayOfWeek;
        switch (weekday)
        {
            case DayOfWeek.Monday:
                badge = AppStateStore.ClientSettings.MondayBadge;
                break;
            case DayOfWeek.Tuesday:
                badge = AppStateStore.ClientSettings.TuesdayBadge;
                break;
            case DayOfWeek.Wednesday:
                badge = AppStateStore.ClientSettings.WednesdayBadge;
                break;
            case DayOfWeek.Thursday:
                badge = AppStateStore.ClientSettings.ThursdayBadge;
                break;
            case DayOfWeek.Friday:
                badge = AppStateStore.ClientSettings.FridayBadge;
                break;
            case DayOfWeek.Saturday:
                badge = AppStateStore.ClientSettings.SaturdayBadge;
                break;
            case DayOfWeek.Sunday:
                badge = AppStateStore.ClientSettings.SundayBadge;
                break;
        }


        return badge;
    }

}
