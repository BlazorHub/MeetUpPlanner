@page "/comment/{ItemId}"
@inject HttpClient Http
@inject AppState AppStateStore
@inject NavigationManager NavigationManager
@inject DialogService dialogService
@using MeetUpPlanner.Shared
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client

<MeetUp CalendarItem="@meetup" />
<EditForm Model="@comment" OnValidSubmit="SaveComment">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="comment">Neuer Kommentar:</label>
        <InputTextArea id="comment" aria-describedby="commentHelp" class="form-control" @bind-Value="comment.Comment" placeholder="Kurzer Kommentar oder Frage zur Ausfahrt."></InputTextArea>
        <small id="commentHelp" class="form-text text-muted">
            Über die Kommentarfunktion kann die Ausfahrt weiter besprochen werden..
        </small>
    </div>
    <button type="submit" id="BtnSave" class="btn btn-primary">Kommentar speichern ...</button>
    <button type="reset" id="BtnCancel" class="btn btn-secondary" @onclick="@(() => OnCancel())">Zurück ...</button>
</EditForm>
<hr />
@foreach (CalendarComment c in meetup.CommentsList)
{
    <blockquote>
        <p class="mb-0">@c.Comment</p>
        <footer class="blockquote-footer">
            <cite title="Autor">@c.AuthorDisplayName</cite> @c.DisplayDate
            <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => ConfirmDelete(c))"><span class="oi oi-trash" title="Kommentar löschen"></span></button>
        </footer>
    </blockquote>
}
<p class="alert-info">
    @logMessage
</p>


@code {
    [Parameter]
    public string ItemId { get; set; }
    ExtendedCalendarItem meetup = new ExtendedCalendarItem();
    CalendarComment comment = new CalendarComment();
    string logMessage;
    CalendarComment commentToBeDeleted;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(AppStateStore?.KeyWord))
        {
            hubConnection = new HubConnectionBuilder()
                 .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                 .WithAutomaticReconnect()
                 .Build();
            await hubConnection.StartAsync();

            await ReadData();
            comment.AuthorFirstName = AppStateStore.FirstName;
            comment.AuthorLastName = AppStateStore.LastName;
            dialogService.OnClose += DeleteConfirmed;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task ReadData()
    {
        string keyword = AppStateStore.KeyWord;
        // Get referenced calendar item
        meetup = await Http.GetFromJsonAsync<ExtendedCalendarItem>($"Calendar/extendedcalendaritem?keyword={keyword}&itemId={ItemId}");
    }
    private async Task SaveComment()
    {
        string keyword = AppStateStore.KeyWord;
        // Save Comment to server
        comment.CalendarItemId = meetup.Id;
        comment.AuthorFirstName = AppStateStore.FirstName;
        comment.AuthorLastName = AppStateStore.LastName;
        if (!String.IsNullOrEmpty(comment.Comment))
        {
            await Http.PostAsJsonAsync<CalendarComment>($"Calendar/addcomment?keyword={keyword}", comment);
            if (IsConnected) await SendMessage();
        }

        NavigationManager.NavigateTo("/calendar");
    }
    protected void OnCancel()
    {
        NavigationManager.NavigateTo("/calendar");
    }

    protected void ConfirmDelete(CalendarComment c)
    {
        commentToBeDeleted = c;
        dialogService.Confirm("Kommentar wirklich löschen?", "Kommentar", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nein" });
    }
    protected async Task RemoveComment(CalendarComment c)
    {
        string keyword = AppStateStore.KeyWord;
        HttpResponseMessage response = await Http.PostAsJsonAsync<CalendarComment>($"Calendar/removecomment?keyword={keyword}", c);
        string responseBody = await response.Content.ReadAsStringAsync();

        BackendResult result = JsonConvert.DeserializeObject<BackendResult>(responseBody);
        if (result.Success)
        {
            if (IsConnected) await SendMessage(); 
            await ReadData();
            StateHasChanged();
        }
        else
        {
            logMessage = result.Message;
        }
    }
    protected async void DeleteConfirmed(dynamic result)
    {
        bool? removeIt = result;
        if (null != removeIt && null != commentToBeDeleted)
        {
            if ((bool)removeIt)
            {
                await RemoveComment(commentToBeDeleted);
            }
        }
        commentToBeDeleted = null;
    }
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
